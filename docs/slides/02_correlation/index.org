#+SETUPFILE: ../setup.org
#+TITLE: Correlation and Regression
#+AUTHOR: Dale Barr
#+PROPERTY: header-args:R :session *R* :exports both :results value

* Setup                                                            :noexport:

#+begin_src R :exports none :results silent
  options(crayon.enabled = FALSE)
  library("tidyverse")
  library("corrr")

  source("../theme_jetblack.R")

  handw <- read_csv("heights_and_weights.csv",
		    col_types = "dd")

  hw_log <- handw %>%
    mutate(log_height = log(height_in),
	   log_weight = log(weight_lbs))

  my_cov <- .96 * .26 * .65
  my_Sigma <- matrix(c(.26^2, my_cov, 
		       my_cov, .65^2),
		     ncol = 2)

  new_humans <- MASS::mvrnorm(500, 
			      c(height_in = 4.11, weight_lbs = 4.74),
			      my_Sigma) %>%
    exp() %>% # back-transform from log to inches and pounds
    as_tibble() %>% # make tibble for plotting
    mutate(type = "simulated") # tag them as simulated

  ## combine real and simulated datasets
  ## handw is variable containing data from heights_and_weights.csv
  alldata <- bind_rows(handw %>% mutate(type = "real"), 
		       new_humans)

  .ss <- hw_log %>%
    summarise(.mh = mean(log_height),
	      .mw = mean(log_weight),
	      .sh = sd(log_height),
	      .sw = sd(log_weight))

  .rho_xy <- cor(hw_log %>% pull(log_height),
		 hw_log %>% pull(log_weight))

  .ctbl <- tribble(~` `, ~IQ, ~`verbal fluency`, ~`digit span`,
		   "IQ", 1.00, .56, .43,
		   "verbal fluency", .56, 1.00, -.23,
		   "digit span", .43, -.23, 1.00)

  .pos <- MASS::mvrnorm(500, c(0, 0), matrix(c(1, .6, .6, 1), ncol = 2))
  .neg <- MASS::mvrnorm(500, c(0, 0), matrix(c(1, -.6, -.6, 1), ncol = 2))
  .none <- MASS::mvrnorm(500, c(0, 0), matrix(c(1, 0, 0, 1), ncol = 2))

  .mytib <- tibble(
    relationship = factor(c("negative", "none", "positive"),
			  levels = c("positive", "negative", "none")),
    data = list(tibble(x = .neg[, 1], y = .neg[, 2]),
		tibble(x = .none[ ,1], y = .none[, 2]),
		tibble(x = .pos[, 1], y = .pos[, 2]))
  ) %>%
    unnest(data)

  set.seed(62)

  .poly <- readRDS("poly.rds")
  ##.poly <- MASS::mvrnorm(300, c(thomas = 0, richard = 0, harriet = 0),
  ##	      clusterGeneration::genPositiveDefMat(3)$Sigma) %>%
  ##  as_tibble()

  .self <- tibble(me = rnorm(300),
		  myself = me)
#+end_src

* Tweaks                                                           :noexport:
** show how the identity matrix is a special multivariate distribution


* Overview

1. correlations and correlation matrices
2. simulating correlational data

* Correlations

*** Relationships

#+HEADER: :width 1000 :height 450 :res 128
#+begin_src R :exports results :results output graphics file :file corrtypes.png
  ggplot(.mytib, aes(x, y)) +
    facet_wrap(~ relationship,
	       labeller = "label_both") + 
    geom_point(alpha = .1, color = "white") +
    geom_smooth(method = "lm", se = FALSE) +
    coord_cartesian(xlim = c(-4, 4), ylim = c(-4, 4)) +
    theme_jetblack()
#+end_src

#+RESULTS:
[[file:corrtypes.png]]

*** Multiple relationships

#+HEADER: :file poly.png :width 700 :height 700
#+begin_src R :exports results :results output graphics file
par(bg = 'black', fg = 'white', col = 'white')
pairs(~ thomas + richard + harriet, .poly)
#+end_src

#+RESULTS:
[[file:poly.png]]

*** The perfect relationship

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
#+HEADER: :file perfect.png :width 500 :height 500 :res 150
#+begin_src R :exports results :results output graphics file
  ggplot(.self, aes(me, myself)) + 
    geom_point(color = 'white', alpha = .2) + theme_jetblack()  
#+end_src

#+RESULTS:
[[file:perfect.png]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
[[file:whitney.jpg]]
#+REVEAL_HTML: </div>

** The correlation coefficient

Typicaly denoted as $\rho$ (Greek symbol 'rho') or $r$

$-1 \ge r \le 1$

- $r > 0$: positive relationship
- $r < 0$: negative relationship
- $r = 0$: no relationship

\(r^2\): /coefficient of determination/ (shared variance)

Estimated using Pearson or Spearman (rank) method.
In R: =cor()=, =cor.test()=

*** Assumptions

- relationship between $X$ and $Y$ is *linear*
- deviations from line of best fit are *normally distributed*

#+REVEAL_HTML: <br/><br/><br/><br/><br/><br/><br/><br/><br/>

*** Multiple correlations

For $n$ variables, you have

$$\frac{n!}{2(n - 2)!}$$

unique pairwise relationships, where \(n!\) is the *factorial* of \(n\).

In R: =choose(n, 2)=.

*** Correlation matrices

#+begin_src R :exports results :results output html
  .ctbl %>%
    knitr::kable(format = "html")  
#+end_src

In R: =corrr::correlate()=

*** Correlation matrices

#+begin_export html
<table>
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> IQ </th>
   <th style="text-align:right;"> verbal fluency </th>
   <th style="text-align:right;"> digit span </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> IQ </td>
   <td style="text-align:right;"> </td>
   <td style="text-align:right;"> </td>
   <td style="text-align:right;"> </td>
  </tr>
  <tr>
   <td style="text-align:left;"> verbal fluency </td>
   <td style="text-align:right;"> 0.56 </td>
   <td style="text-align:right;">  </td>
   <td style="text-align:right;"> </td>
  </tr>
  <tr>
   <td style="text-align:left;"> digit span </td>
   <td style="text-align:right;"> 0.43 </td>
   <td style="text-align:right;"> -0.23 </td>
   <td style="text-align:right;">  </td>
  </tr>
</tbody>
</table>
#+end_export

*** Correlation functions in R

~cor()~

~cor.test()~

~corrr::correlation()~

* Simulating correlational data

To simulate bivariate (or multivariate) data in R, use =MASS::mvrnorm()=.

=mvrnorm(n, mu, Sigma, ...)=

You need the following information:

- means of \(X\) and \(Y\), \(\mu_x\) and \(\mu_y\)
- standard deviations of \(X\) and \(Y\), \(\sigma_x\) and \(\sigma_y\).
- correlation coefficient \(\rho_{xy}\).

*** The =bivariate= app

https://shiny.psy.gla.ac.uk/Dale/bivariate

*** review: standard deviation

/a measure of how much some quantity varies/

"standard deviation of x": \(\sigma_x\)

"variance of x": \({\sigma_x}^2\)

- estimating \(\sigma_x\) from a sample:

\( \hat{\sigma}_x = \sqrt{\frac{\Sigma\left(X - \hat{\mu}_x\right)^2}{N - 1}} \)

*** Let's make synthetic humans

height and weight measurements for 435 people, taken from [[https://www.geogebra.org/m/RRprACv4][here]]

#+HEADER: :file hw_raw.png :width 600 :height 400 :dpi 150
#+begin_src R :exports results :results output graphics file
  ggplot(handw, aes(height_in, weight_lbs)) +
    geom_point(color = "yellow", alpha = .15) +
    labs(x = "height (in)", y = "weight (lbs)") +
    theme_jetblack()
#+end_src

#+RESULTS:
[[file:hw_raw.png]]

*** Log-transformed data

#+HEADER: :file hw_log.png :width 600 :height 400 :dpi 150
#+begin_src R :exports results :results output graphics file
  ggplot(hw_log, aes(log_height, log_weight)) +
    geom_point(color = "yellow", alpha = .15) +
    labs(x = "log(height)", y = "log(weight)") +
    theme_jetblack()
#+end_src

#+RESULTS:
[[file:hw_log.png]]

*** Summary statistics

#+REVEAL_HTML: <div class="column" style="float:left; width: 70%">
[[file:hw_log.png]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 30%">
| \(\hat{\mu}_x\) | 4.11 |
| \(\hat{\mu}_y\) | 4.74 |
| \(\hat{\sigma}_x\)   |  .26 |
| \(\hat{\sigma}_y\)   |  .65 |
| \(\hat{\rho}_{xy}\) |  .96 |
#+REVEAL_HTML: </div>

*** Covariance matrix

\(\mathbf{\Sigma}\)

*A square matrix that characterizes the variances and their interrelationships (covariances).* 

\begin{pmatrix}
{\sigma_x}^2                & \rho_{xy} \sigma_x \sigma_y \\
\rho_{yx} \sigma_y \sigma_x & {\sigma_y}^2 \\
\end{pmatrix}

Must be *symmetric* and *positive definite*


*** Calculations

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
\begin{pmatrix}
{\sigma_x}^2                & \rho_{xy} \sigma_x \sigma_y \\
\rho_{yx} \sigma_y \sigma_x & {\sigma_y}^2 \\
\end{pmatrix}
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
| \(\sigma_{x}\) |  .26 |
| \(\sigma_{y}\) |  .65 |
| \(\rho_{xy}\)  |  .96 |
#+REVEAL_HTML: </div>

*** Simulating with =MASS::mvrnorm()=

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
#+begin_src R :exports both :results output
  my_cov <- .96 * .26 * .65
  my_Sigma <- matrix(c(.26^2, my_cov, 
		       my_cov, .65^2),
		     ncol = 2)
  my_Sigma
#+end_src

#+RESULTS:
: 
:         [,1]    [,2]
: [1,] 0.06760 0.16224
: [2,] 0.16224 0.42250

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
#+begin_src R :exports both :results output
  set.seed(62) 

  ## DON'T put library(MASS) 
  ## in your script!
  newpeeps <-
    MASS::mvrnorm(6, 
		  mu = c(height = 4.11,
			 weight = 4.74),
		  Sigma = my_Sigma)

  newpeeps
#+end_src

#+RESULTS:
: 
:        height   weight
: [1,] 4.254209 5.282913
: [2,] 4.257828 4.895222
: [3,] 3.722376 3.759767
: [4,] 4.191287 4.764229
: [5,] 4.739967 6.185191
: [6,] 4.058105 4.806485

#+REVEAL_HTML: </div>

*** Transform back to raw units

The =exp()= function is the inverse of =log()=.

#+begin_src R :results output
  exp(newpeeps)
#+end_src

#+RESULTS:
:         height    weight
: [1,]  70.40108 196.94276
: [2,]  70.65632 133.64963
: [3,]  41.36254  42.93844
: [4,]  66.10779 117.24065
: [5,] 114.43045 485.50576
: [6,]  57.86453 122.30092


*** Our synthetic humans

#+HEADER: :file synthhumans.png :width 800 :height 600
#+begin_src R :exports results :results output graphics file
  ggplot(alldata, aes(height_in, weight_lbs)) +
    geom_point(aes(colour = type), alpha = .2) + 
    scale_color_manual(values = c("#F0E442", "#0072B2")) +
    theme_jetblack()
#+end_src

#+RESULTS:
[[file:synthhumans.png]]

